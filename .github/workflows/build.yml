name: Build nds-bootstrap

on:
  push:
    branches: ["*"]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: ["*"]
    paths-ignore:
      - 'README.md'
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm
    name: Build with Docker using devkitARM
    outputs:
      commit_tag: ${{ steps.vars.outputs.commit_tag }}
      commit_hash: ${{ steps.vars.outputs.commit_hash }}
      author_name: ${{ steps.vars.outputs.author_name }}
      committer_name: ${{ steps.vars.outputs.committer_name }}
      commit_subject: ${{ steps.vars.outputs.commit_subject }}
      commit_message: ${{ steps.vars.outputs.commit_message }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v1
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install p7zip-full gcc -y

          sudo gcc lzss.c -o /usr/local/bin/lzss
      - name: Build nightly
        if: ${{ !startsWith(github.ref, 'refs/tags') }}
        run: make package-nightly
      - name: Build release
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        run: make package-release
      - name: Set variables
        id: vars
        run: |
          echo ::set-output name=commit_tag::$(git describe --abbrev=0 --tags)
          echo ::set-output name=commit_hash::$(git log --format=%h -1)

          # Webhook info
          echo "::set-output name=author_name::$(git log -1 $GITHUB_SHA --pretty=%aN)"
          echo "::set-output name=committer_name::$(git log -1 $GITHUB_SHA --pretty=%cN)"
          echo "::set-output name=commit_subject::$(git log -1 $GITHUB_SHA --pretty=%s)"
          echo "::set-output name=commit_message::$(git log -1 $GITHUB_SHA --pretty=%b)"
      - name: Pack 7z nightly
        if: ${{ !startsWith(github.ref, 'refs/tags') }}
        run: |
          printf "${{ steps.vars.outputs.commit_hash }}\n" >> bin/nightly-bootstrap.ver
          mv bin/ nds-bootstrap/
          7z a nds-bootstrap.7z nds-bootstrap/

          mkdir -p ~/artifacts
          cp nds-bootstrap.7z ~/artifacts
      - name: Pack 7z release
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        run: |
          printf "Release ${{ steps.vars.outputs.commit_tag }}\n" >> bin/release-bootstrap.ver
          cd bin
          7z a nds-bootstrap.7z .
          7z a nds-bootstrap.zip .

          mkdir -p ~/artifacts
          cp nds-bootstrap.7z ~/artifacts
          cp nds-bootstrap.zip ~/artifacts
      - name: Publish build to GH Actions
        uses: actions/upload-artifact@v2
        with:
          path: ~/artifacts/*
          name: build

  # Only run this for non-PR jobs.
  publish_build:
    runs-on: ubuntu-latest
    name: Publish build to TWLBot/Builds
    if: ${{ success() && !startsWith(github.ref, 'refs/pull') }}
    needs: build
    env:
      COMMIT_HASH: ${{ needs.build.outputs.commit_hash }}
      AUTHOR_NAME: ${{ needs.build.outputs.author_name }}
      COMMIT_SUBJECT: ${{ needs.build.outputs.commit_subject }}
      COMMIT_MESSAGE: ${{ needs.build.outputs.commit_message }}
    outputs:
      current_date: ${{ steps.commit.outputs.current_date }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Upload to ${{ github.repository }} release
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        run: |
          ID=$(jq --raw-output '.release.id' $GITHUB_EVENT_PATH)

          for file in ${{ github.workspace }}/build/*; do
            AUTH_HEADER="Authorization: token ${{ secrets.GITHUB_TOKEN }}"
            CONTENT_LENGTH="Content-Length: $(stat -c%s $file)"
            CONTENT_TYPE="Content-Type: application/7z-x-compressed"
            UPLOAD_URL="https://uploads.github.com/repos/${{ github.repository }}/releases/$ID/assets?name=$(basename $file)"

            curl -XPOST -H "$AUTH_HEADER" -H "$CONTENT_LENGTH" -H "$CONTENT_TYPE" --upload-file "$file" "$UPLOAD_URL"
          done
      - name: Commit and push to TWLBot/Builds
        if: ${{ !startsWith(github.ref, 'refs/tags') }}
        id: commit
        run: |
          CURRENT_DATE=$(date +"%Y%m%d-%H%M%S")
          echo ::set-output name=current_date::$CURRENT_DATE

          git config --global user.email "flamekat54@aol.com"
          git config --global user.name "TWLBot"
          git clone --depth 1 https://${{ secrets.TWLBOT_TOKEN }}@github.com/TWLBot/Builds.git
          cd Builds
          cp ${{ github.workspace }}/build/* .
          git stage .
          git commit -m "nds-bootstrap | $COMMIT_HASH"
          git tag v$CURRENT_DATE
          git push origin master v$CURRENT_DATE
      - name: Release to TWLBot/Builds
        if: ${{ !startsWith(github.ref, 'refs/tags') }}
        run: |
          AUTH_HEADER="Authorization: token ${{ secrets.TWLBOT_TOKEN }}"
          CONTENT_TYPE="Content-Type: application/json"
          API_URL="https://api.github.com/repos/TWLBot/Builds/releases"
          RELEASE_INFO="{\"tag_name\": \"v${{ steps.commit.outputs.current_date }}\", \"name\": \"nds-bootstrap | $COMMIT_HASH\", \"body\": \"$AUTHOR_NAME - $COMMIT_SUBJECT\n\n$COMMIT_MESSAGE\", \"prerelease\": true}"

          RESPONSE=$(curl -XPOST -H "$AUTH_HEADER" -H "$CONTENT_TYPE" "$API_URL" -d "$RELEASE_INFO")

          ID=$(echo $RESPONSE | jq --raw-output '.id')

          for file in ${{ github.workspace }}/build/*; do
            AUTH_HEADER="Authorization: token ${{ secrets.TWLBOT_TOKEN }}"
            CONTENT_LENGTH="Content-Length: $(stat -c%s $file)"
            CONTENT_TYPE="Content-Type: application/7z-x-compressed"
            UPLOAD_URL="https://uploads.github.com/repos/TWLBot/Builds/releases/$ID/assets?name=$(basename $file)"

            curl -XPOST -H "$AUTH_HEADER" -H "$CONTENT_LENGTH" -H "$CONTENT_TYPE" --upload-file "$file" "$UPLOAD_URL"
          done

  send_webhook:
    runs-on: ubuntu-latest
    needs: [publish_build, build]
    name: Send Discord webhook
    if: ${{ !startsWith(github.ref, 'refs/pull') }}
    env:
      CURRENT_DATE: ${{ needs.publish_build.outputs.current_date }}
      AUTHOR_NAME: ${{ needs.build.outputs.author_name }}
      COMMITTER_NAME: ${{ needs.build.outputs.committer_name }}
      COMMIT_SUBJECT: ${{ needs.build.outputs.commit_subject }}
      COMMIT_MESSAGE: ${{ needs.build.outputs.commit_message }}
    steps:
      - name: Send success webhook
        if: ${{ success() }}
        run: |
          curl -o send.sh https://raw.githubusercontent.com/DS-Homebrew/discord-webhooks/master/send-ghactions.sh
          chmod +x send.sh
          ./send.sh success ${{ secrets.WEBHOOK_URL }}
      - name: Send failure webhook
        if: ${{ failure() }}
        run: |
          curl -o send.sh https://raw.githubusercontent.com/DS-Homebrew/discord-webhooks/master/send-ghactions.sh
          chmod +x send.sh
          ./send.sh failure ${{ secrets.WEBHOOK_URL }}
